# Docker Composeファイルのバージョンを指定しています。
version: '3'
# 以下で「db」「web」二つのサービスを定義します。
services:
 # mysqlを使用します。
 db:
   # 「mysql:8.0」を指定します。
   image: mysql:8.0
   # MySQLがユーザーのパスワードを保護する方法を決めるプラグインです。
   # DBにユーザーがログインする際、どのような方式でパスワードを確認するかを決めるのがこの認証プラグインです。
   command: --default-authentication-plugin=mysql_native_password
   # ローカルの状況を仮想環境の指定ディレクトリにマウント（接続）します。（タイムリーにローカルの変更が仮想環境に反映される）
   volumes: 
    # ローカルの「./src/db/mysql_data」を、仮想環境のディレクトリ「/var/lib/mysql」に接続します。
    # 仮想環境のデフォルトのディレクトリ構造は、「/var/lib」だが、「mysql」と記載することで、「/var/lib/mysql」となる。
    # これを指定しておかないと、もし、ローカル側でコンテナを削除して再度作り直すなどした際に、仮想環境ではデータが反映されないという面倒なことになる。
    - ./src/db/mysql_data:/var/lib/mysql
   # 環境変数を設定します。
   # 環境変数とは身近なもので例えると鍵入れボックスです。
   # パスワードなどは、こちらに記載します。
   # 仮想環境で使用します。
   environment: 
    # 以下「MYSQL_ROOT_PASSWORD」が鍵入れボックスだとすると、「password」は、鍵入れボックスのパスワードになります。
    # mysqlは、root user（管理者）のパスワードがいるので、それを設定している。* ローカルのdbのパスワード ≠ 仮想環境のdbのパスワード
    # 以下は、仮想環境のmysqlのrootのパスワードになります。
    MYSQL_ROOT_PASSWORD: password
 #「web」というサービスでは、「rails」を使用します。
 web:
  # .（ドット）は現在のディレクトリを指す。
  # これは、現在のディレクトリ（testapp_rails_docker）構造を参照して、同じディレクトリ構造のdockerイメージをbuild（作成する）という意味。
  build: .
  # サーバーを起動する際、3000番ポートを利用し、'-b'オプションによってIPアドレスを '0.0.0.0' にバインドします。
  # これにより、サーバーはすべての郵便ポスト(ネットワークインターフェース)に対してリクエストを受け付けるようになります。
  # つまり、サーバーは自分の所在地を問わず、どの郵便ポストからでも手紙(リクエスト)を受け取ることができます。
  # ただし、Dockerコンテナは通常、ホストマシンのローカルネットワーク内でのみアクセス可能。
  command: /bin/sh -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
  # ローカルの状況を仮想環境の指定ディレクトリにマウント（接続）する。
  # この様にすることで、タイムリーにローカルの変更が、仮想環境に反映される。
  volumes:
   # ローカルのsrcディレクトリを参照して、仮想環境にappディレクトリを作成する。
   - ./src:/app

  ports:
   # ローカル側の3000ポートを仮想環境の3000ポートに接続する。
   - "3000:3000"
  # こちらは、webというサービスは、DBと依存関係にあるということを指しております。
  # 通常、web（今回rails）側からDB（今回MySQL）に接続しようとすると、DB側のIPアドレスを指定しないといけない。
  # しかし、以下の様に記載することで、IPアドレスをわざわざ記載することなく接続できる。
  depends_on:
   - db
